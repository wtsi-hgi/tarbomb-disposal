#!/bin/bash

# MIT License
# Copyright (c) 2015 Genome Research Limited

set -eu -o pipefail

function usage {
  cat <<EOF
tarbomb Disposal
Usage: $(basename "$0") [options] FILE

Extract the tar FILE into the current working directory. If the contents
of the tar file are namespaced into their own directory, then this is
the same as "tar xf FILE". However, if the contents extract all over the
working directory (i.e., a tarbomb), then a directory is first created
for them (with the same name as FILE, with the extension removed).

The following tar options can be passed through:

  -m  Do not extract modification time
  -o  Set owner to yourself
  -p  Preserve file permissions
  -v  Verbose output

These may be specified with or without a preceding dash.
EOF
}

# Count unique roots in the tar file
function roots {
  FILE=$1
  echo $(tar tf "$FILE" | cut -d/ -f1 | uniq | wc -l)
}

# Strip archive extension from the tar file for the tarbomb directory
# n.b., This strips everything after (and including) ".t", so it will
# catch ".tar", ".tar.gz", ".tgz", etc., but will also catch false
# positives such as ".txt"... It shouldn't cause any problems.
function strip_ext {
  FILE=$(basename "$1")
  echo "${FILE%.t*}"
}

if [ -z "${1:-}" ]; then
  usage
  exit 1
fi

# Last argument
FILE=${@: -1}
# Yikes! Strip unsupported flags from the first-to-penultimate argument
OPTIONS=$(sed "s/[^mopv]//g" <<< ${@:1:$(($#-1))})

EXTRACT=.

case $(roots "$FILE") in
0)
  # Empty or not a tar archive
  echo "\"$FILE\" is empty or not a tar achive" >&2
  usage
  exit 1
  ;;

1)
  # Demilitarised tar archive
  ;;

*)
  # tarbomb: Create extraction directory (if possible)
  BOMBDIR=$(strip_ext "$FILE")
  if [ ! -e "$BOMBDIR" ]; then
    mkdir "$BOMBDIR"
    EXTRACT=$BOMBDIR
  else
    echo "Cannot create directory \"$BOMBDIR\" for tarbomb extraction" >&2
    exit 1
  fi
  ;;
esac

tar ${OPTIONS}xf "$FILE" -C "$EXTRACT"
